const jsonToGo = require("./json-to-go");

function quote(str) {
  return "'" + str
    .replace(/\t/g, "\\t")
    .replace(/\n/g, "\\n")
    .replace(/'/g, "\\'") + "'"
}

function test() {
  const testCases = [
    {
      input: '{"SourceCode": ""}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"SourceCode"`\n}'
    },
    {
      input: '{"source_code": ""}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"source_code"`\n}'
    },
    {
      input: '{"sourceCode": ""}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"sourceCode"`\n}'
    },
    {
      input: '{"SOURCE_CODE": ""}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"SOURCE_CODE"`\n}'
    },
    {
      input: '{"PublicIP": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"PublicIP"`\n}'
    },
    {
      input: '{"public_ip": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"public_ip"`\n}'
    },
    {
      input: '{"publicIP": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"publicIP"`\n}'
    },
    {
      input: '{"PUBLIC_IP": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"PUBLIC_IP"`\n}'
    },
    {
      input: '{"+1": "Fails", "-1": "This should not cause duplicate field name"}',
      expected:
        'type AutoGenerated struct {\n\tNum1 string `json:"+1"`\n\tNum10 string `json:"-1"`\n}'
    }
  ];

  for (const testCase of testCases) {
    const got = jsonToGo(testCase.input);
    if (got.error) {
      console.assert(!got.error, `format('${testCase.input}'): ${got.error}`);
    } else {
      console.assert(
        got.go === testCase.expected,
        `format('${testCase.input}'): \n\tgot:  ${quote(got.go)}\n\twant: ${
          quote(testCase.expected)
        }`
      );
    }
  }

  console.log("done")
}

test();
